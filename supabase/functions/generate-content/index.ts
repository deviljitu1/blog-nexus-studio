import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const geminiApiKey = Deno.env.get('GEMINI_API_KEY');
    if (!geminiApiKey) {
      throw new Error('GEMINI_API_KEY is not set');
    }

    const { prompt, type = 'blog', category = 'General' } = await req.json();

    if (!prompt) {
      return new Response(
        JSON.stringify({ error: 'Prompt is required' }),
        { status: 400, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      );
    }

    console.log('Generating content with prompt:', prompt);

    let systemPrompt = '';
    
    if (type === 'blog') {
      systemPrompt = `You are an expert content writer and SEO specialist. Generate high-quality, SEO-optimized blog content in HTML format. 

Requirements:
- Create engaging, well-structured content with proper HTML tags
- Use semantic HTML elements (h2, h3, p, ul, ol, strong, em)
- Include relevant keywords naturally throughout the content
- Make content scannable with subheadings and bullet points
- Ensure content is valuable, informative, and engaging
- Target 800-1500 words for comprehensive coverage
- Use proper heading hierarchy (h2 for main sections, h3 for subsections)
- Include actionable insights and practical tips

Category: ${category}

Return ONLY the HTML content without any markdown formatting or code blocks.`;
    } else if (type === 'title') {
      systemPrompt = `You are an SEO expert. Create an engaging, SEO-optimized title that:
- Contains 50-60 characters (optimal for search results)
- Includes primary keywords naturally
- Is compelling and click-worthy
- Accurately represents the content
- Uses power words when appropriate
- Follows title case formatting

Return ONLY the title text, nothing else.`;
    } else if (type === 'excerpt') {
      systemPrompt = `You are an SEO copywriter. Create a compelling meta description/excerpt that:
- Is 150-160 characters long (optimal for search snippets)
- Includes primary keywords naturally
- Summarizes the main value proposition
- Includes a call-to-action or benefit
- Is engaging and encourages clicks
- Accurately represents the content

Return ONLY the excerpt text, nothing else.`;
    }

    const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent?key=${geminiApiKey}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        contents: [{
          parts: [{
            text: `${systemPrompt}\n\nUser Request: ${prompt}`
          }]
        }],
        generationConfig: {
          temperature: 0.7,
          topK: 40,
          topP: 0.95,
          maxOutputTokens: 8192,
        },
        safetySettings: [
          {
            category: "HARM_CATEGORY_HARASSMENT",
            threshold: "BLOCK_MEDIUM_AND_ABOVE"
          },
          {
            category: "HARM_CATEGORY_HATE_SPEECH",
            threshold: "BLOCK_MEDIUM_AND_ABOVE"
          },
          {
            category: "HARM_CATEGORY_SEXUALLY_EXPLICIT",
            threshold: "BLOCK_MEDIUM_AND_ABOVE"
          },
          {
            category: "HARM_CATEGORY_DANGEROUS_CONTENT",
            threshold: "BLOCK_MEDIUM_AND_ABOVE"
          }
        ]
      }),
    });

    if (!response.ok) {
      const error = await response.text();
      console.error('Gemini API error:', error);
      throw new Error(`Gemini API error: ${response.status} ${error}`);
    }

    const data = await response.json();
    console.log('Gemini response:', data);

    if (!data.candidates || !data.candidates[0] || !data.candidates[0].content) {
      throw new Error('No content generated by Gemini');
    }

    const generatedContent = data.candidates[0].content.parts[0].text;

    return new Response(
      JSON.stringify({ content: generatedContent }),
      { headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
    );

  } catch (error) {
    console.error('Error in generate-content function:', error);
    return new Response(
      JSON.stringify({ error: error.message }),
      { 
        status: 500, 
        headers: { ...corsHeaders, 'Content-Type': 'application/json' } 
      }
    );
  }
});